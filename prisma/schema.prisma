generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id @unique
  name                   String
  email                  String          @unique
  emailVerified          Boolean
  image                  String?
  createdAt              DateTime
  updatedAt              DateTime
  session                Session[]
  accounts               Account[]
  posts                  Post[]
  bookmarks              Bookmark[]
  pfpUrl                 String?
  fname                  String?
  lname                  String?
  Comment                Comment[]
  Replies                Replies[]
  Connections            Connection[]
  openToCollab           Boolean         @default(true)
  joinedOn               DateTime        @default(now())
  likes                  Like[]
  views                  View[]
  sentMessages           Message[]       @relation("SentMessages")
  receivedMessages       Message[]       @relation("ReceivedMessages")
  conversations          Conversation[]  @relation("UserConversations")
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  friendshipsInitiated   Friendship[]    @relation("FriendshipUser1")
  friendshipsReceived    Friendship[]    @relation("FriendshipUser2")
}

model Session {
  id        String   @id @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime
  updatedAt DateTime
}

model Account {
  id                   String    @id @unique
  userId               String
  user                 User      @relation(fields: [userId], references: [id])
  accountId            String
  providerId           String
  accessToken          String?
  refreshToken         String?
  refreshTokenExpireAt DateTime?
  accessTokenExpiresAt DateTime?
  scope                String?
  idToken              String?
  password             String?
  createdAt            DateTime
  updatedAt            DateTime
}

model verification {
  id         String   @id @unique
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime
  updatedAt  DateTime
}

model Connection {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Post {
  id           String     @id @unique
  title        String
  content      String
  published    Boolean    @default(true)
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  authorImgUrl String
  publishDate  String
  tags         String[]
  bookmarks    Bookmark[]
  comments     Comment[]
  imgUrl       String
  likes        Like[]
  views        View[]
}

model Bookmark {
  id        String   @id @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
}

model Like {
  id String @id @unique

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
}

model View {
  id        String   @id @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
}

model Comment {
  id          String    @id @unique
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  comment     String
  replies     Replies[]
  Post        Post?     @relation(fields: [postId], references: [id])
  postId      String?
  commentedAt DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Replies {
  id        String   @id @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Message {
  id             String       @id @unique
  content        String
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId     String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now())
}

model Conversation {
  id        String    @id @unique
  users     User[]    @relation("UserConversations")
  messages  Message[]
  updatedAt DateTime  @default(now())
  createdAt DateTime  @default(now())
}

model FriendRequest {
  id String @id @unique

  sender     User     @relation("SentFriendRequests", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  receiverId String
  status     String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([senderId, receiverId])
}

model Friendship {
  id String @id @unique

  user1     User     @relation("FriendshipUser1", fields: [userId], references: [id])
  userId    String
  user2     User     @relation("FriendshipUser2", fields: [friendId], references: [id])
  friendId  String
  status    String   @default("ACCEPTED")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendId])
}
